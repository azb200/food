{"version":3,"sources":["components/Form.js","components/Recipes.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","className","onSubmit","getRecipe","style","marginBottom","type","name","placeholder","Recipes","Foooter","href","target","rel","Date","getFullYear","Component","API_KEY","App","state","recipes","_callee","e","recipeName","api_call","data","regenerator_default","wrap","_context","prev","next","elements","value","preventDefault","fetch","concat","sent","json","_this","setState","console","log","stop","this","componentDidMount","localStorage","getItem","JSON","parse","componentDidUpdate","stringify","setItem","components_Form","components_Recipes","Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83097097.chunk.js","sourcesContent":["\nimport React from 'react';\nconst Form = props => (\n\n<div className=\"wrapper\">\n<form onSubmit={props.getRecipe} style={{ marginBottom: \"2rem\" }}>\n    <input className=\"form__input\" type=\"text\" name=\"recipeName\" placeholder=\"Search for recipes\" />\n    <button className=\"form__button\">Search</button>\n</form>\n</div>\n);\n\nexport default Form;","import React from 'react';\n// import { Link } from \"react-router-dom\";\n// Output Recipes container here\nconst Recipes = props => (\n  <div className=\"container\">\n    <div className=\"row\">\n      {/* { props.recipes.map((recipe) => {\n        return (\n          <div key={recipe.title} className=\"col-md-4\" style={{ marginBottom:\"2rem\" }}>\n            <div className=\"recipes__box\">\n              <img \n                className=\"recipe__box-img\" \n                src={recipe.image_url} \n                alt={recipe.title}/>\n                <div className=\"recipe__text\">\n                  <h5 className=\"recipes__title\">\n                    { recipe.title.length < 20 ? `${recipe.title}` : `${recipe.title.substring(0, 25)}...` }\n                  </h5>\n                  <p className=\"recipes__subtitle\">Publisher Name: <span>\n                    { recipe.publisher }\n                  </span></p>\n                </div>\n                <button className=\"recipe_buttons\">\n                  <a href={{ \n                    pathname: `/recipe/${recipe.recipe_id}`,\n                    state: { recipe: recipe.title }\n                  }}>View Recipe</a>\n                </button>\n            </div>\n          </div>\n        );\n      })} */}\n    </div>\n    \n  </div>\n);\n\nexport default Recipes;","\n\nimport React, { Component } from 'react';\n\n class Foooter extends Component {\n  \n render () {\n     return (\n\n<footer className=\"footer\">\n  <div className=\"Container-wrapper\">\n    <div className=\"mb-5 flex-center\">\n      <a href=\"https://www.facebook.com\" target=\"_blank\" rel=\"noopener noreferrer\"  className=\"social\">\n        <i className=\"fa fa-facebook\"></i>\n      </a>\n      <a href=\"https://www.twitter.com\" target=\"_blank\" rel=\"noopener noreferrer\"  className=\"social\">\n        <i className=\"fa fa-twitter\"></i>\n      </a>\n      <a href=\"https://www.google.com\" target=\"_blank\" rel=\"noopener noreferrer\"  className=\"social\">\n        <i className=\"fa fa-google-plus\"></i>\n      </a>\n      <a href=\"https://www.linkedin.com\" target=\"_blank\" rel=\"noopener noreferrer\"  className=\"social\">\n        <i className=\"fa fa-linkedin\"></i>\n      </a>\n      <a href=\"https://www.instagram.com\" target=\"_blank\" rel=\"noopener noreferrer\"  className=\"social\">\n        <i className=\"fa fa-instagram\"></i>\n      </a>\n    </div>\n  </div>\n\n  <div className=\"footer-copyright text-center py-3\">\n    <div className=\"Container-article\">\n      &copy; {new Date().getFullYear()} Copyright:{\" \"} HC WEBD All Right Reserved\n    </div>\n  </div>\n</footer>\n \n    )\n  }\n}\n\nexport default  Foooter;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Form from \"./components/Form\";\nimport Recipes from \"./components/Recipes\";\nimport Footer from \"./components/Footer\";\n// import Navigation from \"./components/Navigation\";\n//import img from \"./components/img/banner.png\";\n\n// Api Key here\nvar API_KEY = \"df2f3c8225c4f5c4daf847e08dd0f1d7\";\n\nclass App extends Component {\n  state = {\n    recipes: []\n  }\n  //  Url Api call element here\n  getRecipe = async (e) => {\n    var recipeName = e.target.elements.recipeName.value;\n    e.preventDefault();\n    var api_call = await fetch(`https://cors-anywhere.herokuapp.com/http://food2fork.com/api/search?key=${API_KEY}&q=${recipeName}&count=12`);\n    \n    var data = await api_call.json();\n    this.setState({ recipes: data.recipes });\n    console.log(this.state.recipes);\n  }\n  componentDidMount = () => {\n    var json = localStorage.getItem(\"recipes\");\n    var recipes = JSON.parse(json);\n    this.setState({ recipes });\n  }\n  componentDidUpdate = () => {\n    var recipes = JSON.stringify(this.state.recipes);\n    localStorage.setItem(\"recipes\", recipes);\n  }\n  render() {\n    \n    \n    return (\n\n      <div className=\"App\">\n        <header className=\"App-header\">\n      <div className=\"LOGO\">\n        <h1 className=\"App-title\"><a href={\" \"}>RECIPES<span></span></a></h1>\n      </div>\n       \n        </header>\n        <Form getRecipe={this.getRecipe} />\n        <Recipes recipes={this.state.recipes} />\n        <Footer />\n      </div>\n    \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}